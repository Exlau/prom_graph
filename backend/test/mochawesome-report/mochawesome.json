{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 0,
    "pending": 0,
    "failures": 5,
    "start": "2023-05-08T11:36:11.949Z",
    "end": "2023-05-08T11:36:11.973Z",
    "duration": 24,
    "testsRegistered": 5,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "378114d2-aca7-4af3-87fb-01607a601aff",
      "title": "",
      "fullFile": "D:\\graduates\\backend\\test\\test.js",
      "file": "\\test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6b7580c-041b-4b89-bb48-6a588bb7d846",
          "title": "test index.js",
          "fullFile": "D:\\graduates\\backend\\test\\test.js",
          "file": "\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should render index page",
              "fullTitle": "test index.js should render index page",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/');\nexpect(res.status).toBe(200);\nexpect(res.text).toMatch(/Hello Koa 2!/);",
              "err": {
                "message": "TypeError: app.address is not a function",
                "estack": "TypeError: app.address is not a function\n    at Test.serverAddress (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:46:22)\n    at new Test (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:34:14)\n    at Object.obj.<computed> [as get] (D:\\graduates\\backend\\node_modules\\supertest\\index.js:43:18)\n    at Context.<anonymous> (test.js:6:31)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "798dedd8-7047-498a-ac02-023bb346e58d",
              "parentUUID": "a6b7580c-041b-4b89-bb48-6a588bb7d846",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 when login with invalid username or password",
              "fullTitle": "test index.js should return 401 when login with invalid username or password",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/login').send({\n  username: 'wronguser',\n  password: 'wrongpassword',\n});\nexpect(res.status).toBe(401);\nexpect(res.body.error).toBe('Invalid username or password');",
              "err": {
                "message": "TypeError: app.address is not a function",
                "estack": "TypeError: app.address is not a function\n    at Test.serverAddress (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:46:22)\n    at new Test (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:34:14)\n    at Object.obj.<computed> [as post] (D:\\graduates\\backend\\node_modules\\supertest\\index.js:43:18)\n    at Context.<anonymous> (test.js:12:31)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "9f0b1b44-5d70-46a8-90fa-63cbc1993d9a",
              "parentUUID": "a6b7580c-041b-4b89-bb48-6a588bb7d846",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return token when login with valid username and password",
              "fullTitle": "test index.js should return token when login with valid username and password",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/login').send({\n  username: 'testuser',\n  password: 'testpassword',\n});\nexpect(res.status).toBe(200);\nexpect(res.body.token).toBeDefined();",
              "err": {
                "message": "TypeError: app.address is not a function",
                "estack": "TypeError: app.address is not a function\n    at Test.serverAddress (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:46:22)\n    at new Test (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:34:14)\n    at Object.obj.<computed> [as post] (D:\\graduates\\backend\\node_modules\\supertest\\index.js:43:18)\n    at Context.<anonymous> (test.js:21:31)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "1d8a8d83-505b-472d-9714-ce751e6cc468",
              "parentUUID": "a6b7580c-041b-4b89-bb48-6a588bb7d846",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 409 when registry with existing username",
              "fullTitle": "test index.js should return 409 when registry with existing username",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/registry').send({\n  username: 'testuser',\n  password: 'testpassword',\n});\nexpect(res.status).toBe(409);\nexpect(res.body.error).toBe('Username already exists');",
              "err": {
                "message": "TypeError: app.address is not a function",
                "estack": "TypeError: app.address is not a function\n    at Test.serverAddress (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:46:22)\n    at new Test (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:34:14)\n    at Object.obj.<computed> [as post] (D:\\graduates\\backend\\node_modules\\supertest\\index.js:43:18)\n    at Context.<anonymous> (test.js:30:31)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "bd63d821-2bcb-4500-a88e-a07ab3158bd3",
              "parentUUID": "a6b7580c-041b-4b89-bb48-6a588bb7d846",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 when registry with new username",
              "fullTitle": "test index.js should return 201 when registry with new username",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/registry').send({\n  username: 'newuser',\n  password: 'newpassword',\n});\nexpect(res.status).toBe(201);\nexpect(res.body.message).toBe('User created');",
              "err": {
                "message": "TypeError: app.address is not a function",
                "estack": "TypeError: app.address is not a function\n    at Test.serverAddress (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:46:22)\n    at new Test (D:\\graduates\\backend\\node_modules\\supertest\\lib\\test.js:34:14)\n    at Object.obj.<computed> [as post] (D:\\graduates\\backend\\node_modules\\supertest\\index.js:43:18)\n    at Context.<anonymous> (test.js:39:31)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "3d8510de-0eb4-4ec7-8ade-44d5a9d86d95",
              "parentUUID": "a6b7580c-041b-4b89-bb48-6a588bb7d846",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "798dedd8-7047-498a-ac02-023bb346e58d",
            "9f0b1b44-5d70-46a8-90fa-63cbc1993d9a",
            "1d8a8d83-505b-472d-9714-ce751e6cc468",
            "bd63d821-2bcb-4500-a88e-a07ab3158bd3",
            "3d8510de-0eb4-4ec7-8ade-44d5a9d86d95"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./mochawesome-report",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}